#!/usr/bin/env python3
"""
Script to compare the similarity between cell clustering labels generated by 
gene-cell clustering and the annotated cell types from the original data.

This script:
1. Loads the clustering results from gene_cell_attention_processing.py
2. Loads the annotated cell types from process_dataset.py
3. Computes various similarity metrics between the two clustering schemes
4. Saves metrics and cluster analysis to intermediate_data/
"""

import sys
from pathlib import Path
import pickle
import numpy as np
import pandas as pd
from sklearn.metrics import (
    adjusted_rand_score, normalized_mutual_info_score, 
    homogeneity_score, completeness_score, v_measure_score,
    confusion_matrix
)

# Add project root to Python path
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

def load_clustering_results(edge_type='tx-bd', layer_index=0):
    if layer_index is not None:
        clustering_file = Path('intermediate_data') / f'clustering_results_{edge_type}_layer_{layer_index}.pkl'
    else:
        clustering_file = Path('intermediate_data') / f'clustering_results_{edge_type}.pkl'
    if clustering_file.exists():
        with open(clustering_file, 'rb') as f:
            clustering_results = pickle.load(f)
    else:
        print("Clustering results not found. Please run gene_cell_attention_processing.py first.")
        return None
    return clustering_results

def load_annotated_cell_types():
    cell_types = pd.read_csv(Path('data_xenium') / 'cell_groups.csv')
    cell_types_dict = dict(zip(cell_types['cell_id'], cell_types['group']))
    cell_types_order = pd.read_csv(Path('data_xenium') / 'cell_types_order_color.csv')
    cell_order = cell_types_order.sort_values('Order')['Cell Type'].tolist()
    cell_type_to_color = dict(zip(cell_types_order['Cell Type'], cell_types_order['Color']))
    return cell_types_dict, cell_order, cell_type_to_color

def align_cell_ids(clustering_cell_ids, annotated_cell_ids):
    common_cells = set(clustering_cell_ids) & set(annotated_cell_ids.keys())
    if len(common_cells) == 0:
        raise ValueError("No common cell IDs found between clustering and annotation data")
    clustering_to_annotated = {cell_id: annotated_cell_ids[cell_id] for cell_id in common_cells}
    return list(common_cells), clustering_to_annotated

def compute_similarity_metrics(cluster_labels, true_labels):
    metrics = {}
    metrics['adjusted_rand_score'] = adjusted_rand_score(true_labels, cluster_labels)
    metrics['normalized_mutual_info_score'] = normalized_mutual_info_score(true_labels, cluster_labels)
    metrics['homogeneity_score'] = homogeneity_score(true_labels, cluster_labels)
    metrics['completeness_score'] = completeness_score(true_labels, cluster_labels)
    metrics['v_measure_score'] = v_measure_score(true_labels, cluster_labels)
    return metrics

def create_detailed_cluster_analysis(cluster_labels, true_labels, cell_ids):
    df = pd.DataFrame({
        'cell_id': cell_ids,
        'cluster': cluster_labels,
        'cell_type': true_labels
    })
    cluster_analysis = {}
    for cluster_id in np.unique(cluster_labels):
        cluster_mask = cluster_labels == cluster_id
        cluster_cells = df[cluster_mask]
        cell_type_counts = cluster_cells['cell_type'].value_counts()
        total_cells = len(cluster_cells)
        purity = cell_type_counts.iloc[0] / total_cells if total_cells > 0 else 0
        cluster_analysis[cluster_id] = {
            'total_cells': total_cells,
            'cell_type_distribution': cell_type_counts.to_dict(),
            'purity': purity,
            'dominant_cell_type': cell_type_counts.index[0] if len(cell_type_counts) > 0 else None,
            'cell_ids': cluster_cells['cell_id'].tolist()
        }
    return cluster_analysis

def save_results(metrics, cluster_analysis, output_dir):
    output_dir = Path(output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)
    metrics_df = pd.DataFrame([metrics])
    metrics_df.to_csv(output_dir / 'similarity_metrics.csv', index=False)
    cluster_analysis_df = pd.DataFrame([
        {
            'cluster_id': cluster_id,
            'total_cells': analysis['total_cells'],
            'purity': analysis['purity'],
            'dominant_cell_type': analysis['dominant_cell_type'],
            'cell_type_distribution': str(analysis['cell_type_distribution'])
        }
        for cluster_id, analysis in cluster_analysis.items()
    ])
    cluster_analysis_df.to_csv(output_dir / 'cluster_analysis.csv', index=False)
    print(f"Results saved to {output_dir}")

def main():
    print("Loading clustering results and annotated cell types...")
    try:
        cell_types_dict, _, _ = load_annotated_cell_types()
        for k, v in cell_types_dict.items():
            if v in ["Endocrine 1", "Endocrine 2"]:
                cell_types_dict[k] = "Endocrine"
            elif v in ["Tumor Cells", "CFTR- Tumor Cells"]:
                cell_types_dict[k] = "Tumor Cells"
        for layer_index in [4]:
            results = load_clustering_results(edge_type='tx-bd', layer_index=layer_index)
            clustering_results = results['results']
            cell_ids = results['cell_ids']
            if clustering_results is None:
                return
            first_key = list(clustering_results.keys())[0]
            cell_clustering = clustering_results[first_key]['cell_clustering']
            cluster_labels = cell_clustering['cluster_labels']
            umap_coords = cell_clustering['coordinates']
            common_cells, clustering_to_annotated = align_cell_ids(cell_ids, cell_types_dict)
            common_indices = [cell_ids.index(cell) for cell in common_cells]
            filtered_cluster_labels = cluster_labels[common_indices] - 1
            filtered_true_labels = [clustering_to_annotated[cell] for cell in common_cells]
            filtered_umap_coords = umap_coords[common_indices]
            unique_true_labels = list(set(filtered_true_labels))
            ordered_true_labels = [label for label in [
                "Acinar", "Ductal", "Endocrine", "Fibroblasts", "Smooth Muscle Cells", "Endothelial",
                "Lymphatic Endothelial Cells", "Macrophages", "T Cells", "B Cells", "Mast Cells",
                "CXCL9/10 Cells", "Tumor Cells", "Metaplastic Cells"
            ] if label in unique_true_labels]
            true_label_to_idx = {label: idx for idx, label in enumerate(ordered_true_labels)}
            numeric_true_labels = [true_label_to_idx[label] for label in filtered_true_labels]
            metrics = compute_similarity_metrics(filtered_cluster_labels, numeric_true_labels)
            cluster_analysis = create_detailed_cluster_analysis(
                filtered_cluster_labels, numeric_true_labels, common_cells
            )
            output_dir = Path('intermediate_data') / 'tx-bd' / 'clustering_comparison'
            save_results(metrics, cluster_analysis, output_dir)
    except Exception as e:
        print(f"Error during analysis: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 